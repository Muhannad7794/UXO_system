# .github/workflows/cd.yml

name: CD

# Define the actions to run on specific events
on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  # Builds and pushes the Docker image to ACR
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and Push image
        # Tags the image with both the unique git commit SHA and 'latest'
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/uxo-system-backend:${{ github.sha }} .
          docker tag ${{ secrets.ACR_LOGIN_SERVER }}/uxo-system-backend:${{ github.sha }} ${{ secrets.ACR_LOGIN_SERVER }}/uxo-system-backend:latest
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/uxo-system-backend --all-tags

  # Deploys the new image to the VM
  deploy:
    name: Deploy to Azure VM
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: SSH and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AZURE_VM_HOST }}
          username: ${{ secrets.AZURE_VM_USERNAME }}
          key: ${{ secrets.AZURE_VM_SSH_KEY }}
          script: |
            # This script runs on your Azure VM
            
            # 1. Prepare the environment
            cd ~
            if [ ! -d "UXO_system" ]; then
              git clone https://github.com/${{ github.repository }}.git UXO_system
            fi
            cd UXO_system
            git pull

            # 2. Create the production environment file from secrets
            echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" > .env.gis
            echo "DJANGO_DEBUG=${{ secrets.PROD_DJANGO_DEBUG }}" >> .env.gis
            echo "DJANGO_ALLOWED_HOSTS=${{ secrets.PROD_ALLOWED_HOSTS }}" >> .env.gis
            echo "CSRF_TRUSTED_ORIGINS=${{ secrets.PROD_CSRF_TRUSTED_ORIGINS }}" >> .env.gis
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env.gis
            echo "DB_USER=${{ secrets.DB_USER }}" >> .env.gis
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env.gis
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env.gis
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env.gis

            # 3. Log in to Azure Container Registry
            sudo docker login ${{ secrets.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} -p ${{ secrets.ACR_PASSWORD }}

            # 4. Pull the latest image
            sudo docker pull ${{ secrets.ACR_LOGIN_SERVER }}/uxo-system-backend:latest
            
            # 5. Run database migrations using the new image
            sudo docker run --rm --env-file ./.env.gis ${{ secrets.ACR_LOGIN_SERVER }}/uxo-system-backend:latest python manage.py migrate --no-input

            # 6. Define the environment variable on the same line as the docker compose command
            # This ensures the variable is available to the sudo environment.
            sudo PROD_IMAGE_NAME=${{ secrets.ACR_LOGIN_SERVER }}/uxo-system-backend:latest docker compose -f docker-compose.prod.yml down
            sudo PROD_IMAGE_NAME=${{ secrets.ACR_LOGIN_SERVER }}/uxo-system-backend:latest docker compose -f docker-compose.prod.yml up -d
