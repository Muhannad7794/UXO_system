# reports/views/geospatial_views.py

from django.contrib.gis.geos import Polygon
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticatedOrReadOnly
from uxo_records.models import UXORecord
from uxo_records.serializers import UXORecordSerializer
from drf_spectacular.utils import extend_schema, OpenApiParameter, OpenApiExample
from ..models import HotZone
from ..serializers import HotZoneSerializer


@extend_schema(
    summary="Geospatial Heatmap Data",
    description="...",
    tags=["Reports & Analytics", "Geospatial"],
)
class HeatmapView(APIView):
    """
    Provides data formatted for a geospatial heatmap layer.
    """

    permission_classes = [IsAuthenticatedOrReadOnly]

    def get(self, request, *args, **kwargs):
        queryset = UXORecord.objects.filter(
            location__isnull=False, danger_score__isnull=False
        )
        heatmap_data = [
            [
                record.location.y,
                record.location.x,
                float(record.danger_score),
            ]
            for record in queryset
        ]
        return Response(heatmap_data)


@extend_schema(
    summary="Filter Records Within a Bounding Box",
    description="...",
    parameters=[...],
    responses=UXORecordSerializer,
    tags=["Reports & Analytics", "Geospatial"],
)
class RecordsWithinBboxView(APIView):
    """
    Filters UXO records that are within a specified geographic bounding box.
    """

    permission_classes = [IsAuthenticatedOrReadOnly]

    def get(self, request, *args, **kwargs):
        bbox_str = request.query_params.get("bbox")
        if not bbox_str:
            return Response(
                {"error": "The 'bbox' query parameter is required."}, status=400
            )
        try:
            coords = [float(c.strip()) for c in bbox_str.split(",")]
            if len(coords) != 4:
                raise ValueError("Bounding box must contain exactly four coordinates.")
            xmin, ymin, xmax, ymax = coords
            bbox_polygon = Polygon.from_bbox((xmin, ymin, xmax, ymax))
            bbox_polygon.srid = 4326
            queryset = UXORecord.objects.filter(location__intersects=bbox_polygon)
            serializer = UXORecordSerializer(queryset, many=True)
            return Response(serializer.data)
        except ValueError as e:
            return Response({"error": f"Invalid 'bbox' format. {e}"}, status=400)
        except Exception as e:
            return Response(
                {"error": f"An unexpected error occurred: {str(e)}"}, status=500
            )


@extend_schema(
    summary="Risk Hot Zones (Clustered)",
    description="""
Retrieves pre-calculated risk 'hot zones'.
These are generated by running a DBSCAN clustering algorithm on the UXO records.
Each feature is a polygon representing a cluster of high-risk incidents.
The 'record_count' and 'avg_danger_score' are properties of each hot zone.
    """,
    responses=HotZoneSerializer,
    tags=["Reports & Analytics", "Geospatial"],
)
class HotZoneView(APIView):
    """
    Provides pre-calculated hot zone polygons for map display.
    """

    permission_classes = [IsAuthenticatedOrReadOnly]

    def get(self, request, *args, **kwargs):
        queryset = HotZone.objects.all()
        serializer = HotZoneSerializer(queryset, many=True)
        return Response(serializer.data)
